<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Creations on Nikhil Bhat</title>
        <link>https://nikhilsbhat.github.io/projects/creations/</link>
        <description>Recent content in Creations on Nikhil Bhat</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <atom:link href="https://nikhilsbhat.github.io/projects/creations/index.xml" rel="self"
                   type="application/rss+xml"/>
        <item>
            <title>Commandline interface for GoCD server</title>
            <link>https://nikhilsbhat.github.io/projects/creations/gocd-cli/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/gocd-cli/</guid>
            <description>Command-line interface for GoCD that helps in interacting with GoCD server.</description>
        </item>
        <item>
            <title>GoCD Golang SDK</title>
            <link>https://nikhilsbhat.github.io/projects/creations/gocd-sdk-golang/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/gocd-sdk-golang/</guid>
            <description>This Library could be helpful while building any tools around GoCD or while interacting with
                GoCD to perform certain daily activities. Which could include checking the health of all agents
                connected to GoCD or status of a job and many more.
            </description>
        </item>
        <item>
            <title>GoCD prometheus exporter</title>
            <link>https://nikhilsbhat.github.io/projects/creations/gocd-prometheus-exporter/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/gocd-prometheus-exporter/</guid>
            <description>Prometheus exporter that helps in collecting various metadata and other information from GoCD
                and exposes it as metrics. This interacts with GoCD server&#39;s api to collect metrics, also monitors
                pipeline directories specified when deployed in GoCD server. It schedules both metric collections from
                GoCD server and pipeline size as cron to reduce resource spike when /metrics is invoked. Most
                importantly disk check is an expensive operation which can spike resource consumption, by doing this way
                load on the platform exporter is running can be reduced.
            </description>
        </item>
        <item>
            <title>GoCD Terraform Provider</title>
            <link>https://nikhilsbhat.github.io/projects/creations/terraform-provider-gocd/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/terraform-provider-gocd/</guid>
            <description>A terraform provider for GoCD that helps in performing tasks on GoCD server.</description>
        </item>
        <item>
            <title>Helm Drift</title>
            <link>https://nikhilsbhat.github.io/projects/creations/helm-drift/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/helm-drift/</guid>
            <description>The helm plugin that helps in identifying deviations(mostly due to in-place edits) in the
                configurations that are deployed via helm chart. Kubernetes&amp;rsquo; resources can be deployed via
                package manager helm, it is easier to deploy but to manage the same require more effort. If helm is
                used, strictly all resources should be managed by helm itself, but there are places where manual
                interventions are needed. This results in configuration drift from helm charts deployed.
            </description>
        </item>
        <item>
            <title>Helm Images</title>
            <link>https://nikhilsbhat.github.io/projects/creations/helm-images/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/helm-images/</guid>
            <description>Identifying all images just before the deployment of the helm chart is not a straight-forward
                task.. This Helm plugin was created to ease this task. This can be installed as an add-on to the helm.
                It helps in filtering images based on the Kubernetes type. It also helps in filtering images based on a
                registry that it is part of.
            </description>
        </item>
        <item>
            <title>k3d Terraform Provider</title>
            <link>https://nikhilsbhat.github.io/projects/creations/terraform-provider-k3d/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/terraform-provider-k3d/</guid>
            <description>A terraform provider support for k3d, which helps in performing all operation that k3d does.
            </description>
        </item>
        <item>
            <title>Terragen</title>
            <link>https://nikhilsbhat.github.io/projects/creations/terragen/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/terragen/</guid>
            <description>Backdrop The idea of Terragen was born while reading and working on several other Terraform
                providers.
                The initial version of the Terragen was just a one-time scaffold generator for Hashicorp Terraform, a
                custom provider with limited features.
                While working on operators for Kubernetes, I bumped into frameworks such as Kubebuilder and
                operator-sdk.
                The idea for the latest version of Terragen is derived from such frameworks.
                Terragen Terraform is one of the best tools available to automate infrastructure, and there is no
                procrastination in accepting this fact.
            </description>
        </item>
        <item>
            <title>Neuron Cloudy</title>
            <link>https://nikhilsbhat.github.io/projects/creations/neuron-cloudy/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/neuron-cloudy/</guid>
            <description>This the backbone of neuron cli and is responsible for conneccting to various cloud from a
                single cloud.
            </description>
        </item>
        <item>
            <title>Neuron</title>
            <link>https://nikhilsbhat.github.io/projects/creations/neuron/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/neuron/</guid>
            <description>In the current era of Devops, with the growing list of tools which one have to deal with to
                automate the day to day tasks in their respective projects is quite challenging.
                Learning new cloud platform brings in its own challenges with it, one has to learn its natvie
                terminologies of calling the same resurce. Seeing all these started working on Neuron.
                No need to know the names of the resources in different cloud.
            </description>
        </item>
        <item>
            <title>Terraform GCP Provider</title>
            <link>https://nikhilsbhat.github.io/projects/creations/terraform-gcp/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/terraform-gcp/</guid>
            <description>A custom provider of Terraform which helps to perform certain operations on GCP which default
                provider does not offer.
                This includes service account key rotation.
            </description>
        </item>
        <item>
            <title>Config</title>
            <link>https://nikhilsbhat.github.io/projects/creations/config/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/config/</guid>
            <description>It is difficult to switch context of different kubernetes clusters hosted in GCP projects. If
                one has to connect cluster using gcloud, will end up running multiple gcloud commands, it is painful to
                run those.
                Yeah, GCP has an option of cloud shell, where one can connect to the cluster hassle-free. It&amp;rsquo;s
                little hard if we have to connect locally from our machines.
                Config solves exactly the same thing, by letting one switch the cluster in one command.
            </description>
        </item>
    </channel>
</rss>