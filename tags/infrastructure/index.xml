<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Infrastructure on Nikhil Bhat</title>
        <link>https://nikhilsbhat.github.io/tags/infrastructure/</link>
        <description>Recent content in Infrastructure on Nikhil Bhat</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <atom:link href="https://nikhilsbhat.github.io/tags/infrastructure/index.xml" rel="self"
                   type="application/rss+xml"/>
        <item>
            <title>Commandline interface for GoCD server</title>
            <link>https://nikhilsbhat.github.io/projects/creations/gocd-cli/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/gocd-cli/</guid>
            <description>Command-line interface for GoCD that helps in interacting with GoCD server.</description>
        </item>
        <item>
            <title>GoCD Golang SDK</title>
            <link>https://nikhilsbhat.github.io/projects/creations/gocd-sdk-golang/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/gocd-sdk-golang/</guid>
            <description>This Library could be helpful while building any tools around GoCD or while interacting with
                GoCD to perform certain daily activities. Which could include checking the health of all agents
                connected to GoCD or status of a job and many more.
            </description>
        </item>
        <item>
            <title>GoCD prometheus exporter</title>
            <link>https://nikhilsbhat.github.io/projects/creations/gocd-prometheus-exporter/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/gocd-prometheus-exporter/</guid>
            <description>Prometheus exporter that helps in collecting various metadata and other information from GoCD
                and exposes it as metrics. This interacts with GoCD server&#39;s api to collect metrics, also monitors
                pipeline directories specified when deployed in GoCD server. It schedules both metric collections from
                GoCD server and pipeline size as cron to reduce resource spike when /metrics is invoked. Most
                importantly disk check is an expensive operation which can spike resource consumption, by doing this way
                load on the platform exporter is running can be reduced.
            </description>
        </item>
        <item>
            <title>GoCD Terraform Provider</title>
            <link>https://nikhilsbhat.github.io/projects/creations/terraform-provider-gocd/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/terraform-provider-gocd/</guid>
            <description>A terraform provider for GoCD that helps in performing tasks on GoCD server.</description>
        </item>
        <item>
            <title>Helm Drift</title>
            <link>https://nikhilsbhat.github.io/projects/creations/helm-drift/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/helm-drift/</guid>
            <description>The helm plugin that helps in identifying deviations(mostly due to in-place edits) in the
                configurations that are deployed via helm chart. Kubernetes&#39; resources can be deployed via package
                manager helm, it is easier to deploy but to manage the same require more effort. If helm is used,
                strictly all resources should be managed by helm itself, but there are places where manual interventions
                are needed. This results in configuration drift from helm charts deployed.
            </description>
        </item>
        <item>
            <title>Helm Images</title>
            <link>https://nikhilsbhat.github.io/projects/creations/helm-images/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/helm-images/</guid>
            <description>Identifying all images just before the deployment of the helm chart is not a straightforward
                task. To make it simple, the helm plugin is leveraged. This can be installed as an add-on to the helm.
                It helps in filtering images based on the Kubernetes type. It also helps in filtering images based on a
                registry which it is part of.
            </description>
        </item>
        <item>
            <title>k3d Terraform Provider</title>
            <link>https://nikhilsbhat.github.io/projects/creations/terraform-provider-k3d/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/terraform-provider-k3d/</guid>
            <description>A terraform provider support for k3d, which helps in performing all operation that k3d does.
            </description>
        </item>
        <item>
            <title>Terragen</title>
            <link>https://nikhilsbhat.github.io/projects/creations/terragen/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/projects/creations/terragen/</guid>
            <description>Terraform is one of the best software available to automate the infrastructure and no
                procrastination in accepting that.
                Extending terraform would help in solving more complexities. Terragen generates defined templates to
                ease the creation of terraform custom provider which will help in extending terraform.
            </description>
        </item>
        <item>
            <title>Identifying drifts from deployed helm releases</title>
            <link>https://nikhilsbhat.github.io/blog/helm-drift/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            <guid>https://nikhilsbhat.github.io/blog/helm-drift/</guid>
            <description>There is no native Helm way of identifying the drifts in the releases deployed via Helm. Now we
                have a Helm plugin to identify the drifts from the Helm releases deployed in the cluster.
                https://artifacthub.io/packages/helm-plugin/helm-drift/drift Just to share context on why this was
                created. We do in-place edits of resources a lot of times but forget to add the value back to the
                codebase; these edits go unnoticed and get overridden in the next deployment, which might screw up the
                environment if the edited changes are required.
            </description>
        </item>
    </channel>
</rss>